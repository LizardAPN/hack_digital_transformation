version: '3.8'

services:
  # Основной сервис приложения
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - YANDEX_GEOCODER_API_KEY=${YANDEX_GEOCODER_API_KEY}
      - GOOGLE_GEOCODER_API_KEY=${GOOGLE_GEOCODER_API_KEY}
    volumes:
      - app-data:/app/data
      - app-logs:/app/logs
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Redis для кэширования и очередей задач
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL для хранения метаданных и результатов обработки
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: building_detector
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/sql_scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    restart: unless-stopped

  # Celery worker для асинхронной обработки изображений
  celery_worker:
    build: .
    command: celery -A src.tasks.worker worker --loglevel=info
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - YANDEX_GEOCODER_API_KEY=${YANDEX_GEOCODER_API_KEY}
      - GOOGLE_GEOCODER_API_KEY=${GOOGLE_GEOCODER_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/building_detector
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - app-data:/app/data
      - app-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # Celery beat для планирования задач
  celery_beat:
    build: .
    command: celery -A src.tasks.worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/building_detector
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - app-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  app-data:
  app-logs:
